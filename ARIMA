def get_historical_from_csv(file_path):
    try:
        # Try reading the data from the CSV file
        df = pd.read_csv(file_path)

        # Ensure that the DataFrame has the required columns
        required_columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
        if not set(required_columns).issubset(df.columns):
            print("CSV file is missing required columns.")
            return None

        # Derive 'Adj Close' by doing a backward shift of 7 days from 'Close'
        df['Adj Close'] = df['Close'].shift(-7)

        # Drop rows where 'Adj Close' is NaN (resulting from backward shift)
        df = df.dropna(subset=['Adj Close'])

        print("Data Retrieval Successful (from CSV).")
        return df

    except FileNotFoundError:
        print(f"CSV file not found at: {file_path}")
        return None

    except pd.errors.EmptyDataError:
        print("CSV file is empty.")
        return None

    except pd.errors.ParserError:
        print(f"Error parsing CSV file at: {file_path}")
        return None

    except Exception as e:
        print(f"Unexpected error reading CSV file: {str(e)}")
        return None

def ARIMA_ALGO(df):
        if 'Date' in df.columns:
            df = df.set_index('Date')

        def arima_model(train, test):
            history = [x for x in train]
            predictions = list()
            forecast_set = list()

            for t in range(len(test)):
                model = ARIMA(history, order=(6,1 ,0))
                model_fit = model.fit()
                output = model_fit.forecast()
                yhat = output[0]
                predictions.append(yhat)
                obs = test[t]
                history.append(obs)
               
            for t in range(7):
                model = ARIMA(history, order=(6, 1, 0))
                model_fit = model.fit()
                output = model_fit.forecast()
                yhat = output[0]
                forecast_set.append(yhat)
                history.append(output)
            return predictions, forecast_set

        Quantity_date = df[['Close']]
        Quantity_date = Quantity_date.fillna(Quantity_date.bfill())
        fig = plt.figure(figsize=(7.2,4.8),dpi=65)
        plt.plot(df.index, df['Close'])
        # plt.savefig('static.png')
        plt.close(fig)
           
        quantity = Quantity_date.values
        size = int(len(quantity) * 0.80)
        train, test = quantity[0:size], quantity[size:len(quantity)]
       
        predictions, forecast_set = arima_model(train, test)
           
        fig = plt.figure(figsize=(7.2,4.8),dpi=65)
        plt.plot(test,label='Actual Price')
        plt.plot(predictions,label='Predicted Price')
        plt.legend(loc=4)
        # plt.savefig('static1.png')
        plt.close(fig)
        arima_pred=round(forecast_set[0],2)
        error_arima = round(math.sqrt(mean_squared_error(test, predictions)),2)
        accuracy_arima = round((r2_score(test, predictions)*100),2)
        mean = statistics.mean(forecast_set)

        print("ARIMA Model Retrieval Successful..")
        return arima_pred, error_arima, accuracy_arima, forecast_set, mean

#quote = request.form['ticker']
csv_file_path = 'icicib.csv'
historical_data = get_historical_from_csv(csv_file_path)

if historical_data is not None:
    # Process the historical data as needed
    today_stock = historical_data.iloc[-1:]
    today_stock = today_stock.round(2)
    historical_data = historical_data.dropna()
    #quote_data["Date"] = quote
print(historical_data.head())

arima_pred, error_arima, accuracy_arima, forecast_set, mean = ARIMA_ALGO(historical_data)
print(accuracy_arima)
